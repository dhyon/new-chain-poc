syntax = "proto3";
package codchen.newchainpoc.band;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "band/params.proto";
import "band/coin_rates.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/codchen/new-chain-poc/x/band/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/codchen/newchainpoc/band/params";
  }
  
  	// CoinRatesResult defines a rpc handler method for MsgCoinRatesData.
  	rpc CoinRatesResult(QueryCoinRatesRequest) returns (QueryCoinRatesResponse) {
		option (google.api.http).get = "/newchainpoc/band/coin_rates_result/{request_id}";
  	}

  	// LastCoinRatesId query the last CoinRates result id
  	rpc LastCoinRatesId(QueryLastCoinRatesIdRequest) returns (QueryLastCoinRatesIdResponse) {
		option (google.api.http).get = "/newchainpoc/band/last_coin_rates_id";
  	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryCoinRatesRequest {int64 request_id = 1;}

message QueryCoinRatesResponse {
  CoinRatesResult result = 1;
}

message QueryLastCoinRatesIdRequest {}

message QueryLastCoinRatesIdResponse {int64 request_id = 1;}

// this line is used by starport scaffolding # 3
